{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPvz0oRIIBKQWoOH/Dyx9+m",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/UmaEdiga04/DL-lab/blob/main/IMDB%20data%20for%20movie%20review%20classification%20problem\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "98vzvzECUp5V",
        "outputId": "445115ad-3360-43ed-f161-b56e3275102c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(**kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "100/100 - 2s - 20ms/step - loss: 0.6769\n",
            "Epoch 2/10\n",
            "100/100 - 0s - 3ms/step - loss: 0.1146\n",
            "Epoch 3/10\n",
            "100/100 - 0s - 4ms/step - loss: 0.1092\n",
            "Epoch 4/10\n",
            "100/100 - 0s - 3ms/step - loss: 0.1083\n",
            "Epoch 5/10\n",
            "100/100 - 0s - 3ms/step - loss: 0.1066\n",
            "Epoch 6/10\n",
            "100/100 - 0s - 3ms/step - loss: 0.1047\n",
            "Epoch 7/10\n",
            "100/100 - 0s - 3ms/step - loss: 0.1042\n",
            "Epoch 8/10\n",
            "100/100 - 0s - 3ms/step - loss: 0.1024\n",
            "Epoch 9/10\n",
            "100/100 - 0s - 3ms/step - loss: 0.1020\n",
            "Epoch 10/10\n",
            "100/100 - 0s - 3ms/step - loss: 0.1017\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.src.callbacks.history.History at 0x7fe26ade0d90>"
            ]
          },
          "metadata": {},
          "execution_count": 1
        }
      ],
      "source": [
        "import numpy as np\n",
        "from keras.models import Sequential\n",
        "from keras.layers import Dense, SimpleRNN\n",
        "\n",
        "model = Sequential()\n",
        "model.add(SimpleRNN(units=3, input_shape=(12, 1)))\n",
        "model.add(Dense(1))\n",
        "\n",
        "model.compile(loss='mean_squared_error', optimizer='adam')\n",
        "\n",
        "trainX = np.random.rand(100, 12, 1)\n",
        "trainY = np.random.rand(100, 1)\n",
        "\n",
        "model.fit(trainX, trainY, epochs=10, batch_size=1, verbose=2)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from keras.layers import SimpleRNN\n",
        "\n",
        "rnn_layer = SimpleRNN(units=128, input_shape=(10, 1))\n",
        "from keras.layers import LSTM\n",
        "\n",
        "lstm_layer = LSTM(units=128, input_shape=(10, 1))\n",
        "from keras.layers import GRU\n",
        "\n",
        "gru_layer = GRU(units=128, input_shape=(10, 1))"
      ],
      "metadata": {
        "id": "ud7ifbuXYX7M"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from keras.datasets import imdb\n",
        "from keras.preprocessing import sequence\n",
        "\n",
        "# Load the IMDB dataset\n",
        "(x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=10000)\n",
        "\n",
        "# Convert the labels to binary (positive/negative)\n",
        "y_train = np.array([1 if label > 5 else 0 for label in y_train])\n",
        "y_test = np.array([1 if label > 5 else 0 for label in y_test])\n",
        "\n",
        "# Pad the sequences to have a maximum length of 500\n",
        "max_length = 500\n",
        "x_train = sequence.pad_sequences(x_train, maxlen=max_length)\n",
        "x_test = sequence.pad_sequences(x_test, maxlen=max_length)\n",
        "\n",
        "# Convert the data to numpy arrays\n",
        "x_train = np.array(x_train)\n",
        "x_test = np.array(x_test)\n",
        "\n",
        "print(\"Training data shape:\", x_train.shape)\n",
        "print(\"Testing data shape:\", x_test.shape)\n",
        "print(\"Training labels shape:\", y_train.shape)\n",
        "print(\"Testing labels shape:\", y_test.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2BaufuLRdKVr",
        "outputId": "93f2f60e-15a0-474f-cd9f-2a06ca7d9a30"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/imdb.npz\n",
            "\u001b[1m17464789/17464789\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n",
            "Training data shape: (25000, 500)\n",
            "Testing data shape: (25000, 500)\n",
            "Training labels shape: (25000,)\n",
            "Testing labels shape: (25000,)\n"
          ]
        }
      ]
    }
  ]
}